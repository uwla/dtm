#!/bin/sh

function showHelp() {
	cat <<EOF
DTWM - DOT FILES MANAGER

NAME
	dtm - a simple script to manage dot files.

DESCRIPTION
	dtm is a shell script to manage configuration files (also known as dot files) in your home directory. It is simple, flexible, and can be extended to be used with GIT.

	dtm aims to track only files in the user's home directory. It tracks configuration files by keeping a list of the path of those files relative to the \$HOME directory.

COMMANDS
	-a, add PATH
		Start tracking one or more files.

	-e, edit
		Edit the list of files being tracked manually.

	-r, rm PATH FLAGS
		Stop tracking the given files. If the flag '--all' is present, remove all files from the track list.

	-l, list, ls
		List files  being tracked

	-L, ln, link DIR FLAGS
		Create links of tracked files from \$HOME to DIR. If flag '--symbolic' is present, then it will create symbolic links. Otherwise, it will create hard links

	-c, cp, copy DIR
		Copy all files being trackedi from \$HOME to DIR.

	-s, sync DIR FLAGS
		Sync dot files from DIR to the HOME directory. If flag '--copy' is present, the files will be copied. If flag '--symbolic' is present, it will create symbolic links. Otherwise, it will create hard links.

	-S, sync-dirs TARGET DEST FLAGS
		Sync dot files from TARGET to DEST. Syntax is the same as for the command sync. 
		

EXAMPLES
	Add single file to track list
		dtm add ~/.bashrc

	Add multiple files to track list
		dtm add ~/.config/ranger/*

	Remove file from track list
		dtm rm .config/i3/config

	Remove files from track list
		dtm rm ~/.vimrc/*

	Remove all tracked fiels from track list
		dtm rm --all

	Create hard links of tracked files to specified dir
		dtm ln my-projects/github/dotfiles

	Create symbolic links of tracked files to specified dir
		dtm ln my-projects/github/dotfiles --symbolic

	Copy tracked files to specificied dir
		dtm cp my-projects/github/dotfiles

	Copy files from DIR to \$HOME directory whose path relative to DIR is in the track list
		dtm sync my-projects/github/dotfiles --copy

	Create hard links of file from DIR to \$HOME directory whose path relative to DIR is in the track list
		dtm sync my-projects/github/dotfiles 

	Create symbolic links of file from DIR to \$HOME directory whose path relative to DIR is in the track list
		dtm sync my-projects/github/dotfiles 

ENVIRONMENT VARIABLES
	DTM_CONFIG_HOME
		The path where to store data files, such as the list of tracked files. By default it is \$XDG_CONFIG_HOME/dtm. If \$XDG_CONFIG_HOME is unset, then \$DTM_CONFIG_HOME default to \$HOME/.local/share/dtm.
	DTM_GIT_DIR
		The path of the default git directory. This is used as a fallback if DIR is not specified for the dtm's commands ln, cp, and sync.

LICENSE
	Do whatever you wish with the code of dtm.

AUTHOR
	Andre Souza Abreu.
EOF
}

# variables
if [[ -z $DTM_CONFIG_HOME  ]]; then
	if [[ -n ${XDG_CONFIG_HOME} ]]; then
		DTM_CONFIG_HOME=${XDG_CONFIG_HOME}/dtm
	else
		DTM_CONFIG_HOME=${HOME}/.config/dtm
	fi
fi

DTM_TRACKED_FILES_LIST=${DTM_CONFIG_HOME}/tracked-files.txt

# create files that DTM will use to track dot files
function createDataFiles() {
	mkdir -p ${DTM_CONFIG_HOME}
	touch $DTM_TRACKED_FILES_LIST
}

# get the path of a file/directory relative to the home directory
function getPathRelativeToHome() {
	path=$1
	path=${path#$HOME/}
	if [[ "$path" == "$1" ]]; then
		path=$(pwd)/$path
		path=${path#$HOME/}
	fi
	echo $path
}

# adds file to list of files being tracked
function trackFiles() {
	while [ -n "$1" ]; do
		filename=$1
		shift
		if ! [ -f "$filename" ]; then
			echo "file \"$filename\" does not exist. Skipping it"
			continue
		fi
		getPathRelativeToHome $filename >> ${DTM_TRACKED_FILES_LIST}
	done

	# remove duplicated files
	LC_ALL=C sort -i $DTM_TRACKED_FILES_LIST | uniq > $DTM_TRACKED_FILES_LIST.tmp
	mv $DTM_TRACKED_FILES_LIST.tmp $DTM_TRACKED_FILES_LIST
}

# output the fiels being tracked
function getTrackedFiles() {
	cat ${DTM_TRACKED_FILES_LIST}
}

# 
function untrackAll() {
	echo -n $NULL > $DTM_TRACKED_FILES_LIST
	exit 0
}

# do not track the given file anymore
function untrackFiles() {
	[[ "$1" == "--all" ]] && untrackAll

	# we could use 'sed' to delete the line containing the name
	# of the file to untrack. However, this would cause bugs with
	# file names that have special characters. Therefore, it is
	# safer to do this manually using shell script.

	# create a copy of files being tracked
	tmpfile=${DTM_TRACKED_FILES_LIST}.tmp
	cp $DTM_TRACKED_FILES_LIST $tmpfile

	# create a new list of files being tracked
	# ignoring the given files
	rm $DTM_TRACKED_FILES_LIST
	files=$@
	while read line; do
		trackThisFile=1
		for file in $files; do
			if [ "$file" == "$line" ]; then
				trackThisFile=
				break
			fi
		done
		[[ -n $trackThisFile ]] && echo $line >> $DTM_TRACKED_FILES_LIST
	done < $tmpfile

	# delete temporary file
	rm $tmpfile
}

function throwError() {
	echo "ERROR: $@"
	exit 1
}

function syncDotFiles() {
	source_dir=$1
	target_dir=$2
	[[ -z $source_dir ]] && throwError 'source directory not specified'
	[[ -z $target_dir ]] && throwError 'target directory not specified'
	[[ ! -d "$source_dir" ]] && throwError 'invalid source directory'
	[[ ! -d "$target_dir" ]] && throwError 'invalid target directory '

	# flags
	flag=$3
	[[ "$flag" == "--symbolic" ]] && symbolic=1
	[[ "$flag" == "--copy" ]] && copy=1

	while read file; do
		fullpath=${source_dir}/$file

		if [[ ! -f "$fullpath" ]]; then
			echo "File $fullpath does not exist. Skipping it"
			continue
		fi

		dir=${file%/*}
		basename=${file##*/}

		if [[ "$file" == "$dir" ]]; then
			destination="$target_dir/$basename"
			dir=
		else
			destination="$target_dir/$dir/$basename"
		fi

		if [[ -f "$destination"  ]]; then
			echo "Skipping $file because file already exists"
			continue
		fi

		mkdir -p "$target_dir/$dir"

		if [[ -n $copy ]]; then
			cp "$fullpath" "$destination"
		elif [[ -n $symbolic ]]; then
			ln -s "$fullpath" "$destination"
		else
			ln "$fullpath" "$destination"
		fi

	done < $DTM_TRACKED_FILES_LIST
}

createDataFiles

action=$1
(( $# > 0 )) && shift

case $action in
	list|ls|-l)
		getTrackedFiles
		;;
	add|-a)
		trackFiles $@
		;;
	edit|-e)
		$EDITOR $DTM_TRACKED_FILES_LIST
		;;
	rm|-r)
		untrackFiles $@
		;;
	link|ln|-L)
		syncDotFiles $HOME $@
		;;
	copy|cp|-c)
		if [[ -n $1 ]]; then
			dest=$1
			shift
		else
			dest=${DTM_GIT_DIR}
		fi
		syncDotFiles $HOME $dest --copy
		;;
	sync|-s)
		if [[ -n $1 ]]; then
			dest=$1
			shift
			flags=$@
		else
			dest=${DTM_GIT_DIR}
		fi
		syncDotFiles $dest $HOME $flags
		;;
	sync-dirs|-S)
		syncDotFiles $@
		;;
	*)
		showHelp
		;;
esac
